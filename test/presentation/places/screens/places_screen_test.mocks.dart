// Mocks generated by Mockito 5.3.2 from annotations
// in seven_days_weather/test/presentation/places/screens/places_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:bloc/bloc.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:seven_days_weather/domain/usecases/get_places.dart' as _i2;
import 'package:seven_days_weather/domain/usecases/get_weather_by_place.dart'
    as _i3;
import 'package:seven_days_weather/presentation/places/bloc/places_bloc.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGetPlaces_0 extends _i1.SmartFake implements _i2.GetPlaces {
  _FakeGetPlaces_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetWeatherByPlace_1 extends _i1.SmartFake
    implements _i3.GetWeatherByPlace {
  _FakeGetWeatherByPlace_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlacesState_2 extends _i1.SmartFake implements _i4.PlacesState {
  _FakePlacesState_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PlacesBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlacesBloc extends _i1.Mock implements _i4.PlacesBloc {
  @override
  _i2.GetPlaces get getPlaces => (super.noSuchMethod(
        Invocation.getter(#getPlaces),
        returnValue: _FakeGetPlaces_0(
          this,
          Invocation.getter(#getPlaces),
        ),
        returnValueForMissingStub: _FakeGetPlaces_0(
          this,
          Invocation.getter(#getPlaces),
        ),
      ) as _i2.GetPlaces);
  @override
  set getPlaces(_i2.GetPlaces? _getPlaces) => super.noSuchMethod(
        Invocation.setter(
          #getPlaces,
          _getPlaces,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.GetWeatherByPlace get getWeatherByPlace => (super.noSuchMethod(
        Invocation.getter(#getWeatherByPlace),
        returnValue: _FakeGetWeatherByPlace_1(
          this,
          Invocation.getter(#getWeatherByPlace),
        ),
        returnValueForMissingStub: _FakeGetWeatherByPlace_1(
          this,
          Invocation.getter(#getWeatherByPlace),
        ),
      ) as _i3.GetWeatherByPlace);
  @override
  set getWeatherByPlace(_i3.GetWeatherByPlace? _getWeatherByPlace) =>
      super.noSuchMethod(
        Invocation.setter(
          #getWeatherByPlace,
          _getWeatherByPlace,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i4.PlacesState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakePlacesState_2(
          this,
          Invocation.getter(#state),
        ),
        returnValueForMissingStub: _FakePlacesState_2(
          this,
          Invocation.getter(#state),
        ),
      ) as _i4.PlacesState);
  @override
  _i5.Stream<_i4.PlacesState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i5.Stream<_i4.PlacesState>.empty(),
        returnValueForMissingStub: _i5.Stream<_i4.PlacesState>.empty(),
      ) as _i5.Stream<_i4.PlacesState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);
  @override
  _i6.EventTransformer<Event> debounceTransformer<Event>(Duration? duration) =>
      (super.noSuchMethod(
        Invocation.method(
          #debounceTransformer,
          [duration],
        ),
        returnValue: (
          _i5.Stream<Event> events,
          _i6.EventMapper<Event> mapper,
        ) =>
            _i5.Stream<Event>.empty(),
        returnValueForMissingStub: (
          _i5.Stream<Event> events,
          _i6.EventMapper<Event> mapper,
        ) =>
            _i5.Stream<Event>.empty(),
      ) as _i6.EventTransformer<Event>);
  @override
  void add(_i4.PlacesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i4.PlacesEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i4.PlacesState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i4.PlacesEvent>(
    _i6.EventHandler<E, _i4.PlacesState>? handler, {
    _i6.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i6.Transition<_i4.PlacesEvent, _i4.PlacesState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i5.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i4.PlacesState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
